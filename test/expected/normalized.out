\set ECHO ALL
\set ON_ERROR_STOP 1
SET TIME ZONE 'UTC';
DROP TABLE IF EXISTS metrics_labels CASCADE;
NOTICE:  table "metrics_labels" does not exist, skipping
DROP TABLE IF EXISTS metrics CASCADE;
NOTICE:  table "metrics" does not exist, skipping
DROP TABLE IF EXISTS input;
NOTICE:  table "input" does not exist, skipping
SELECT create_prometheus_table('input');
 create_prometheus_table 
-------------------------
 
(1 row)

\dt
            List of relations
 Schema |     Name     | Type  |  Owner   
--------+--------------+-------+----------
 public | input_copy   | table | postgres
 public | input_labels | table | postgres
 public | input_values | table | postgres
(3 rows)

\d input
                        View "public.input"
 Column |           Type           | Collation | Nullable | Default 
--------+--------------------------+-----------+----------+---------
 time   | timestamp with time zone |           |          | 
 name   | text                     |           |          | 
 value  | double precision         |           |          | 
 labels | jsonb                    |           |          | 

\d input_values
                      Table "public.input_values"
  Column   |           Type           | Collation | Nullable | Default 
-----------+--------------------------+-----------+----------+---------
 time      | timestamp with time zone |           |          | 
 value     | double precision         |           |          | 
 labels_id | integer                  |           |          | 
Indexes:
    "input_values_labels_id_idx" btree (labels_id, "time" DESC)
Foreign-key constraints:
    "input_values_labels_id_fkey" FOREIGN KEY (labels_id) REFERENCES input_labels(id)

\d input_labels
                               Table "public.input_labels"
   Column    |  Type   | Collation | Nullable |                 Default                  
-------------+---------+-----------+----------+------------------------------------------
 id          | integer |           | not null | nextval('input_labels_id_seq'::regclass)
 metric_name | text    |           | not null | 
 labels      | jsonb   |           |          | 
Indexes:
    "input_labels_pkey" PRIMARY KEY, btree (id)
    "input_labels_metric_name_labels_key" UNIQUE CONSTRAINT, btree (metric_name, labels)
    "input_labels_labels_idx" gin (labels)
    "input_labels_metric_name_idx" btree (metric_name)
Referenced by:
    TABLE "input_values" CONSTRAINT "input_values_labels_id_fkey" FOREIGN KEY (labels_id) REFERENCES input_labels(id)

\d+ input_copy
                                  Table "public.input_copy"
 Column |    Type     | Collation | Nullable | Default | Storage | Stats target | Description 
--------+-------------+-----------+----------+---------+---------+--------------+-------------
 sample | prom_sample |           | not null |         | plain   |              | 
Triggers:
    insert_trigger BEFORE INSERT ON input_copy FOR EACH ROW EXECUTE PROCEDURE prometheus.insert_view_normal('input_values', 'input_labels')

INSERT INTO input_samples VALUES ('cpu_usage{service="nginx",host="machine1"} 34.6 1494595898000'),
                         ('cpu_usage{service="nginx",host="machine2"} 10.3 1494595899000'),
                         ('cpu_usage{service="nginx",host="machine1"} 30.2 1494595928000');
INSERT INTO input_samples(sample) VALUES ('cpu_usage{service="nginx",host="machine1"} 34.6 1494595898000'),
                         ('cpu_usage{service="nginx",host="machine2"} 10.3 1494595899000'),
                         ('cpu_usage{service="nginx",host="machine1"} 30.2 1494595928000');
SELECT * FROM input;
             time             |   name    | value |                  labels                  
------------------------------+-----------+-------+------------------------------------------
 Fri May 12 13:31:38 2017 UTC | cpu_usage |  34.6 | {"host": "machine1", "service": "nginx"}
 Fri May 12 13:31:39 2017 UTC | cpu_usage |  10.3 | {"host": "machine2", "service": "nginx"}
 Fri May 12 13:32:08 2017 UTC | cpu_usage |  30.2 | {"host": "machine1", "service": "nginx"}
 Fri May 12 13:31:38 2017 UTC | cpu_usage |  34.6 | {"host": "machine1", "service": "nginx"}
 Fri May 12 13:31:39 2017 UTC | cpu_usage |  10.3 | {"host": "machine2", "service": "nginx"}
 Fri May 12 13:32:08 2017 UTC | cpu_usage |  30.2 | {"host": "machine1", "service": "nginx"}
(6 rows)

SELECT * FROM input_values;
             time             | value | labels_id 
------------------------------+-------+-----------
 Fri May 12 13:31:38 2017 UTC |  34.6 |         1
 Fri May 12 13:31:39 2017 UTC |  10.3 |         2
 Fri May 12 13:32:08 2017 UTC |  30.2 |         1
 Fri May 12 13:31:38 2017 UTC |  34.6 |         1
 Fri May 12 13:31:39 2017 UTC |  10.3 |         2
 Fri May 12 13:32:08 2017 UTC |  30.2 |         1
(6 rows)

SELECT * FROM input_labels;
 id | metric_name |                  labels                  
----+-------------+------------------------------------------
  1 | cpu_usage   | {"host": "machine1", "service": "nginx"}
  2 | cpu_usage   | {"host": "machine2", "service": "nginx"}
(2 rows)

SELECT sample FROM input_samples
WHERE prom_time(sample) >  'Fri May 12 13:31:00 2017' AND
      prom_name(sample) = 'cpu_usage' AND
      prom_labels(sample) @> '{"service": "nginx", "host": "machine1"}';
                               sample                               
--------------------------------------------------------------------
 cpu_usage{host="machine1",service="nginx"} 34.600000 1494595898000
 cpu_usage{host="machine1",service="nginx"} 30.200000 1494595928000
 cpu_usage{host="machine1",service="nginx"} 34.600000 1494595898000
 cpu_usage{host="machine1",service="nginx"} 30.200000 1494595928000
(4 rows)

EXPLAIN (costs off, verbose on) SELECT * FROM input
WHERE time >  'Fri May 12 13:31:00 2017' AND
      name = 'cpu_usage' AND
      labels @> '{"service": "nginx", "host": "machine1"}';
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: m."time", l.metric_name, m.value, l.labels
   ->  Bitmap Heap Scan on public.input_labels l
         Output: l.id, l.metric_name, l.labels
         Recheck Cond: (l.metric_name = 'cpu_usage'::text)
         Filter: (l.labels @> '{"host": "machine1", "service": "nginx"}'::jsonb)
         ->  Bitmap Index Scan on input_labels_metric_name_idx
               Index Cond: (l.metric_name = 'cpu_usage'::text)
   ->  Bitmap Heap Scan on public.input_values m
         Output: m."time", m.value, m.labels_id
         Recheck Cond: ((m.labels_id = l.id) AND (m."time" > 'Fri May 12 13:31:00 2017 UTC'::timestamp with time zone))
         ->  Bitmap Index Scan on input_values_labels_id_idx
               Index Cond: ((m.labels_id = l.id) AND (m."time" > 'Fri May 12 13:31:00 2017 UTC'::timestamp with time zone))
(13 rows)

EXPLAIN (costs off, verbose on) SELECT time, name, value, labels FROM input
WHERE time >  'Fri May 12 13:31:00 2017' AND
      name = 'cpu_usage' AND
      labels @> '{"service": "nginx", "host": "machine1"}';
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: m."time", l.metric_name, m.value, l.labels
   ->  Bitmap Heap Scan on public.input_labels l
         Output: l.id, l.metric_name, l.labels
         Recheck Cond: (l.metric_name = 'cpu_usage'::text)
         Filter: (l.labels @> '{"host": "machine1", "service": "nginx"}'::jsonb)
         ->  Bitmap Index Scan on input_labels_metric_name_idx
               Index Cond: (l.metric_name = 'cpu_usage'::text)
   ->  Bitmap Heap Scan on public.input_values m
         Output: m."time", m.value, m.labels_id
         Recheck Cond: ((m.labels_id = l.id) AND (m."time" > 'Fri May 12 13:31:00 2017 UTC'::timestamp with time zone))
         ->  Bitmap Index Scan on input_values_labels_id_idx
               Index Cond: ((m.labels_id = l.id) AND (m."time" > 'Fri May 12 13:31:00 2017 UTC'::timestamp with time zone))
(13 rows)

-- Cleanup
DROP TABLE input_values CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to view input
drop cascades to view input_samples
DROP TABLE input_labels CASCADE;
